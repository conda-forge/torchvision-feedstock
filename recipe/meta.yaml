{% set tests_to_skip = "test_url_is_accessible" %}
{% set version = "0.19.1" %}
# see github.com/conda-forge/conda-forge.github.io/issues/1059 for naming discussion
# torchvision requires that CUDA major and minor versions match with pytorch
# https://github.com/pytorch/vision/blob/fa99a5360fbcd1683311d57a76fcc0e7323a4c1e/torchvision/extension.py#L79C1-L85C1
{% set torch_proc_type = "cuda" ~ cuda_compiler_version | replace('.', '') if cuda_compiler_version != "None" else "cpu" %}
# Upstream has specific compatability ranges for pytorch and python which are
# updated every 0.x release. https://github.com/pytorch/vision#installation
{% set compatible_pytorch = "2.4" %}

{% if cuda_compiler_version in (None, "None", True, False) %}
{% set cuda_major = 0 %}
{% else %}
{% set cuda_major = environ.get("cuda_compiler_version", "11.2").split(".")[0] | int %}
{% endif %}

package:
  name: torchvision
  version: {{ version }}

source:
  url: https://github.com/pytorch/vision/archive/refs/tags/v{{ version }}.tar.gz
  sha256: 083e75c467285595ec3eb3c7aa8493c19e53d7eb42f13046fb56a07c8897e5a8
  patches:
    # seems to be necessary for aarch???
    - patches/0001-Monkeypatch-TORCH_LIB_PATH.patch
    # Our newer conda-forge clang compilers complain about this for OSX
    # https://github.com/pytorch/vision/pull/8406/files#r1730151047
    - patches/0002-Unvendor-giflib.patch
    - patches/0003-Support-nvjpeg-at-conda-forge.patch

    # 2024/08 hmaarrfk
    # known flaky test https://github.com/pytorch/vision/blob/9e78fe29e0851b10eb8fba0b88cc521ad67cf322/test/test_image.py#L840
    - patches/0004-Skip-OSS-CI-tests-as-well-in-conda-forge-azure.patch

    # https://github.com/pytorch/vision/issues/8609
    - patches/no_strict_transforms_warning.patch

build:
  string: cpu_py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [cuda_compiler_version == "None"]
  string: cuda{{ cuda_compiler_version | replace('.', '') }}py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [cuda_compiler_version != "None"]
  number: 2
  skip: true  # [win]
  # no CUDA-enabled pytorch on aarch yet
  skip: true  # [cuda_compiler_version != "None" and aarch64]

requirements:
  build:
    - {{ stdlib('c') }}
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - {{ compiler('cuda') }}                 # [cuda_compiler_version != "None"]
    {% if cuda_major >= 12 %}
    - libcublas-dev                          # [build_platform != target_platform]
    - libcusolver-dev                        # [build_platform != target_platform]
    - libcusparse-dev                        # [build_platform != target_platform]
    - libnvjpeg-dev                          # [build_platform != target_platform]
    {% endif %}
    - python                                 # [build_platform != target_platform]
    - cross-python_{{ target_platform }}     # [build_platform != target_platform]
    # - numpy                                  # [build_platform != target_platform]
    - pytorch ={{ compatible_pytorch }}.*={{ torch_proc_type }}*  # [build_platform != target_platform]
  host:
    - python
    # - numpy
    - pip
    - setuptools
    - cudnn                                  # [cuda_compiler_version != "None"]
    {% if cuda_major >= 12 %}
    - libcublas-dev
    - libcusolver-dev
    - libcusparse-dev
    - libnvjpeg-dev
    {% endif %}
    - libjpeg-turbo
    - libpng
    # https://github.com/pytorch/vision/pull/8406/files#r1730151047
    - giflib
    # Specify lgpl version of ffmpeg so that there are
    # no quesitons about the license of the resulting binary
    # hmaarrfk: 2022/07, I think that torchvision just has bugs with ffmpeg
    # - ffmpeg {{ ffmpeg }}=lgpl_*
    # exclude 8.3.0 and 8.3.1 specifically due to pytorch/vision#4146, python-pillow/Pillow#5571
    - pillow >=5.3.0,!=8.3.0,!=8.3.1
    - libtorch ={{ compatible_pytorch }}.*={{ torch_proc_type }}*
    - pytorch ={{ compatible_pytorch }}.*={{ torch_proc_type }}*
    - requests
  run:
    - python
    - pytorch ={{ compatible_pytorch }}.*={{ torch_proc_type }}*
    - {{ pin_compatible('cudnn') }}          # [cuda_compiler_version != "None"]
    - pillow >=5.3.0,!=8.3.0,!=8.3.1
    # They don't really document it, but it seems that they want a minimum version
    # https://github.com/pytorch/vision/blob/v0.19.0/packaging/torchvision/meta.yaml#L26
    - numpy >=1.23.5
    # While their conda package depends on requests, it seems it is only used for some test
    # scripts and not the runtime
    # - requests

test:
  requires:
    - pytest
    - requests
    - av
    - expecttest
    - scipy
    - pytest-mock
  source_files:
    - test
    - references
    - pytest.ini
  imports:
    - torchvision
    - torchvision.datasets
    - torchvision.models
    - torchvision.transforms
    - torchvision.utils
  commands:
    # skip test_url_is_accessible instead of hitting 20+ servers per run, since
    # each server might be occasionally unresponsive and end up failing our CI
    {% set tests_to_skip = "test_url_is_accessible" %}
    # spurious failure because upstream skip (Image.__version__ >= "7") does not trigger for Pillow "10"
    {% set tests_to_skip = tests_to_skip + " or (test_transforms and test_adjust_saturation)" %}
    # osx warns with nnpack if there is no AVX2, see conda-forge/pytorch-cpu-feedstock#56
    {% set tests_to_skip = tests_to_skip + " or test_adjust_sharpness" %}  # [osx]
    # 2021/10/28 hmaarrfk: I am able to run it locally on a large machine.
    # It seems to fail around testing of vgg
    # This test seems to just destroy the memory of the system.
    {% set tests_to_skip = tests_to_skip + " or test_forward_backward" %}
    {% set tests_to_skip = tests_to_skip + " or test_jit_forward_backward" %}
    # 2022/01/21 hmaarrfk (test_frame_reading)
    # They indicate that there can be a 1% error in their test.
    # However, this test seems to causing the CIs to fail when this
    # case is hit. For example the last CI failed with
    #
    # >                   assert mean_delta.item() < 2.5
    # E                   assert 2.502098560333252 < 2.5
    {% set tests_to_skip = tests_to_skip + " or test_frame_reading" %}
    # Random perspective tests can fail if the perspective is too sharp
    # https://github.com/conda-forge/torchvision-feedstock/issues/38
    {% set tests_to_skip = tests_to_skip + " or test_randomperspective_fill" %}
    # Tolerance on the test_frozenbatchnorm2d_eps test seems to be too strict
    {% set tests_to_skip = tests_to_skip + " or test_frozenbatchnorm2d_eps" %}
    {% set tests_to_skip = tests_to_skip + " or test_random_apply" %}
    # 2022/03/29 hmaarrfk
    # It seems that this test can cause segmentation faults on the CIs.
    {% set tests_to_skip = tests_to_skip + " or test_write_video_with_audio" %}
    {% set tests_to_skip = tests_to_skip + " or test_video_clips_custom_fps" %}
    # 2022/07 hmaarrfk really large memory tests. Fail on CIs
    {% set tests_to_skip = tests_to_skip + " or test_memory_efficient_densenet" %}
    {% set tests_to_skip = tests_to_skip + " or test_resnet_dilation" %}
    {% set tests_to_skip = tests_to_skip + " or test_mobilenet_v2_residual_setting" %}
    {% set tests_to_skip = tests_to_skip + " or test_mobilenet_norm_layer" %}
    {% set tests_to_skip = tests_to_skip + " or test_inception_v3_eval" %}
    {% set tests_to_skip = tests_to_skip + " or test_fasterrcnn_double" %}
    {% set tests_to_skip = tests_to_skip + " or test_googlenet_eval" %}
    {% set tests_to_skip = tests_to_skip + " or test_fasterrcnn_switch_devices" %}
    {% set tests_to_skip = tests_to_skip + " or test_mobilenet_v2_residual_setting" %}
    {% set tests_to_skip = tests_to_skip + " or test_vitc_models" %}
    {% set tests_to_skip = tests_to_skip + " or test_classification_model" %}
    {% set tests_to_skip = tests_to_skip + " or test_segmentation_model" %}
    {% set tests_to_skip = tests_to_skip + " or test_detection_model" %}
    {% set tests_to_skip = tests_to_skip + " or test_detection_model_validation" %}
    {% set tests_to_skip = tests_to_skip + " or test_video_model" %}
    {% set tests_to_skip = tests_to_skip + " or test_quantized_classification_model" %}
    {% set tests_to_skip = tests_to_skip + " or test_detection_model_trainable_backbone_layers" %}
    {% set tests_to_skip = tests_to_skip + " or test_raft" %}
    {% set tests_to_skip = tests_to_skip + " or test_build_fx_feature_extractor" %}
    # 2023/01 These tests fail on newer numpy with module 'numpy' has no attribute 'int'
    {% set tests_to_skip = tests_to_skip + " or test_transformation_range" %}
    {% set tests_to_skip = tests_to_skip + " or test_transformation_discrete" %}
    # 2023/05 The gaussian blur tests are known to be flaky due to some non-determinism on CUDA (see pytorch/vision#6755)
    {% set tests_to_skip = tests_to_skip + " or test_batched_vs_single" %}
    # 2023/11 Draw boxes test broken by pillow 1.10.0, but is non-critical and the test is patched upstream (pytorch/vision#8051)
    {% set tests_to_skip = tests_to_skip + " or test_draw_boxes" %}
    # 2024/02 These tests assert warnings and in PyTorch 2.1.2 the number of warnings increased
    # causing them to fail
    {% set tests_to_skip = tests_to_skip + " or test_pretrained_pos or test_equivalent_behavior_weights" %}
    - pytest --verbose -k "not ({{ tests_to_skip }})" --durations=50 test/  # [not aarch64]
    - pytest -k "not ({{ tests_to_skip }})" --durations=50 test/  # [aarch64 and (build_platform == target_platform)]

about:
  home: http://pytorch.org/
  license: BSD-3-Clause
  license_family: BSD
  license_file: LICENSE
  summary: Image and video datasets and models for torch deep learning
  dev_url: https://github.com/pytorch/vision

extra:
  recipe-maintainers:
    - nehaljwani
    - hmaarrfk
    - h-vetinari
  feedstock-name: torchvision
